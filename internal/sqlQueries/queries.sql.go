// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package sqlQueries

import (
	"context"
	"database/sql"
)

const findAnime = `-- name: FindAnime :one
SELECT
	anime_id, anime_name, released, img, link, created_at
FROM
	anime_list
WHERE
	anime_name LIKE ?
`

func (q *Queries) FindAnime(ctx context.Context, animeName string) (AnimeList, error) {
	row := q.db.QueryRowContext(ctx, findAnime, animeName)
	var i AnimeList
	err := row.Scan(
		&i.AnimeID,
		&i.AnimeName,
		&i.Released,
		&i.Img,
		&i.Link,
		&i.CreatedAt,
	)
	return i, err
}

const getAllAnimeList = `-- name: GetAllAnimeList :many
SELECT
	anime_id, anime_name, released, img, link, created_at
FROM
	anime_list
`

func (q *Queries) GetAllAnimeList(ctx context.Context) ([]AnimeList, error) {
	rows, err := q.db.QueryContext(ctx, getAllAnimeList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AnimeList
	for rows.Next() {
		var i AnimeList
		if err := rows.Scan(
			&i.AnimeID,
			&i.AnimeName,
			&i.Released,
			&i.Img,
			&i.Link,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAnimeEpisode = `-- name: GetAnimeEpisode :one
SELECT
	anime_eps_list_id, animeid, episode, created_at
FROM
	anime_eps_list
WHERE
	animeID = ?
	AND episode = ?
`

type GetAnimeEpisodeParams struct {
	Animeid sql.NullInt64
	Episode string
}

func (q *Queries) GetAnimeEpisode(ctx context.Context, arg GetAnimeEpisodeParams) (AnimeEpsList, error) {
	row := q.db.QueryRowContext(ctx, getAnimeEpisode, arg.Animeid, arg.Episode)
	var i AnimeEpsList
	err := row.Scan(
		&i.AnimeEpsListID,
		&i.Animeid,
		&i.Episode,
		&i.CreatedAt,
	)
	return i, err
}

const getAnimeEpsByLink = `-- name: GetAnimeEpsByLink :one
SELECT
	anime_id, anime_name, released, img, link, created_at
FROM
	anime_list
WHERE
	link = ?
`

func (q *Queries) GetAnimeEpsByLink(ctx context.Context, link string) (AnimeList, error) {
	row := q.db.QueryRowContext(ctx, getAnimeEpsByLink, link)
	var i AnimeList
	err := row.Scan(
		&i.AnimeID,
		&i.AnimeName,
		&i.Released,
		&i.Img,
		&i.Link,
		&i.CreatedAt,
	)
	return i, err
}

const insertAnimeEp = `-- name: InsertAnimeEp :one
INSERT INTO
	anime_eps_list (animeID, episode)
VALUES
	(?, ?) RETURNING anime_eps_list_id, animeid, episode, created_at
`

type InsertAnimeEpParams struct {
	Animeid sql.NullInt64
	Episode string
}

func (q *Queries) InsertAnimeEp(ctx context.Context, arg InsertAnimeEpParams) (AnimeEpsList, error) {
	row := q.db.QueryRowContext(ctx, insertAnimeEp, arg.Animeid, arg.Episode)
	var i AnimeEpsList
	err := row.Scan(
		&i.AnimeEpsListID,
		&i.Animeid,
		&i.Episode,
		&i.CreatedAt,
	)
	return i, err
}

const insertAnimeIntoList = `-- name: InsertAnimeIntoList :one
INSERT INTO
	anime_list (anime_name, released, img, link)
VALUES
	(?, ?, ?, ?) RETURNING anime_id, anime_name, released, img, link, created_at
`

type InsertAnimeIntoListParams struct {
	AnimeName string
	Released  interface{}
	Img       sql.NullString
	Link      string
}

func (q *Queries) InsertAnimeIntoList(ctx context.Context, arg InsertAnimeIntoListParams) (AnimeList, error) {
	row := q.db.QueryRowContext(ctx, insertAnimeIntoList,
		arg.AnimeName,
		arg.Released,
		arg.Img,
		arg.Link,
	)
	var i AnimeList
	err := row.Scan(
		&i.AnimeID,
		&i.AnimeName,
		&i.Released,
		&i.Img,
		&i.Link,
		&i.CreatedAt,
	)
	return i, err
}
