// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package sqlQueries

import (
	"context"
	"database/sql"
)

const findAnimeByName = `-- name: FindAnimeByName :one
SELECT anime_id, anime_name, released, img, link, created_at FROM anime_list WHERE CONTAINS (anime_name, ?)
`

func (q *Queries) FindAnimeByName(ctx context.Context, contains interface{}) (AnimeList, error) {
	row := q.db.QueryRowContext(ctx, findAnimeByName, contains)
	var i AnimeList
	err := row.Scan(
		&i.AnimeID,
		&i.AnimeName,
		&i.Released,
		&i.Img,
		&i.Link,
		&i.CreatedAt,
	)
	return i, err
}

const getAllAnimeList = `-- name: GetAllAnimeList :many
SELECT anime_id, anime_name, released, img, link, created_at FROM anime_list
`

func (q *Queries) GetAllAnimeList(ctx context.Context) ([]AnimeList, error) {
	rows, err := q.db.QueryContext(ctx, getAllAnimeList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AnimeList
	for rows.Next() {
		var i AnimeList
		if err := rows.Scan(
			&i.AnimeID,
			&i.AnimeName,
			&i.Released,
			&i.Img,
			&i.Link,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertAnimeIntoList = `-- name: InsertAnimeIntoList :one
INSERT INTO anime_list (anime_name, released, img, link) VALUES (?, ?, ?, ?) RETURNING anime_id, anime_name, released, img, link, created_at
`

type InsertAnimeIntoListParams struct {
	AnimeName string
	Released  interface{}
	Img       sql.NullString
	Link      string
}

func (q *Queries) InsertAnimeIntoList(ctx context.Context, arg InsertAnimeIntoListParams) (AnimeList, error) {
	row := q.db.QueryRowContext(ctx, insertAnimeIntoList,
		arg.AnimeName,
		arg.Released,
		arg.Img,
		arg.Link,
	)
	var i AnimeList
	err := row.Scan(
		&i.AnimeID,
		&i.AnimeName,
		&i.Released,
		&i.Img,
		&i.Link,
		&i.CreatedAt,
	)
	return i, err
}
